<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/17/hello-world/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhanghaisong911/picBed/master/img/404.jpg" alt><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css">
<script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"></script>
]]></content>
      <categories>
        <category>java</category>
        <category>servlet</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>tcpdump</title>
    <url>/2020/09/17/tcpdump/</url>
    <content><![CDATA[<p>如果你抓过 TCP 的包，你一定听说过图形化界面软件 wireshark，tcpdump 则是一个命令行的网络流量分析工具，功能非常强大。尤其是做后台开发的同学要在服务器上定位一些黑盒的应用，tcpdump 是唯一的选择。这篇文章会重点介绍基本使用、过滤条件、保存文件几个方面。</p>
<a id="more"></a>
<h2 id="TCPDump-基础"><a href="#TCPDump-基础" class="headerlink" title="TCPDump 基础"></a>TCPDump 基础</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -i any</span><br></pre></td></tr></table></figure>
<p>-i表示指定哪一个网卡，any 表示任意。有哪些网卡可以用 ifconfig 来查看，在我的虚拟机上，ifconfig 输出结果如下<br><img src="http://note.youdao.com/yws/res/2134/90D5D301E88446AEB09C086D9AD138C0" alt="image"><br>如果只想查看 eth0 网卡经过的数据包，就可以使用tcpdump -i eth0来指定。</p>
<h3 id="过滤主机：host-选项"><a href="#过滤主机：host-选项" class="headerlink" title="过滤主机：host 选项"></a>过滤主机：host 选项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any host 10.211.55.2</span><br></pre></td></tr></table></figure>
<h3 id="过滤源地址、目标地址：src、dst"><a href="#过滤源地址、目标地址：src、dst" class="headerlink" title="过滤源地址、目标地址：src、dst"></a>过滤源地址、目标地址：src、dst</h3><p>如果只想抓取主机 10.211.55.10 发出的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any src 10.211.55.10</span><br></pre></td></tr></table></figure>
<p>如果只想抓取主机 10.211.55.10 收到的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any dst 10.211.55.1</span><br></pre></td></tr></table></figure>
<h3 id="过滤端口：port-选项"><a href="#过滤端口：port-选项" class="headerlink" title="过滤端口：port 选项"></a>过滤端口：port 选项</h3><p>抓取某端口的数据包：port 选项比如查看 80 端通信的数据包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any port 80</span><br></pre></td></tr></table></figure>
<p>如果只想抓取 80 端口收到的包，可以加上 dst</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any dst port 80</span><br></pre></td></tr></table></figure>
<h3 id="过滤指定端口范围内的流量"><a href="#过滤指定端口范围内的流量" class="headerlink" title="过滤指定端口范围内的流量"></a>过滤指定端口范围内的流量</h3><p>比如抓取 21 到 23 区间所有端口的流量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump portrange 21-23</span><br></pre></td></tr></table></figure>
<h3 id="禁用主机与端口解析：-n-与-nn-选项"><a href="#禁用主机与端口解析：-n-与-nn-选项" class="headerlink" title="禁用主机与端口解析：-n 与 -nn 选项"></a>禁用主机与端口解析：-n 与 -nn 选项</h3><p>如果不加-n选项，tcpdump 会显示主机名，比如下面的test.ya.local和c2.shared</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">09:04:56.821206 IP test.ya.local.59915 &gt; c2.shared.ssh: Flags [P.], seq 397:433, ack 579276, win 2048, options [nop,nop,TS val 1200089877 ecr 435612355], length 36</span><br></pre></td></tr></table></figure>
<p>加上-n选项以后，可以看到主机名都已经被替换成了 ip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any  -n</span><br><span class="line">10:02:13.705656 IP 10.211.55.2.59915 &gt; 10.211.55.10.ssh: Flags [P.], seq 829:865, ack 1228756, win 2048, options [nop,nop,TS val 1203228910 ecr 439049239], length 36</span><br></pre></td></tr></table></figure>
<p>但是常用端口还是会被转换成协议名，比如 ssh 协议的 22 端口。如果不想 tcpdump 做转换，可以加上 -nn，这样就不会解析端口了，输出中的 ssh 变为了 22</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any  -nn</span><br><span class="line"></span><br><span class="line">10:07:37.598725 IP 10.211.55.2.59915 &gt; 10.211.55.10.22: Flags [P.], seq 685:721, ack 1006224, win 2048, options [nop,nop,TS val 1203524536 ecr 439373132], length 36</span><br></pre></td></tr></table></figure>

<h3 id="过滤协议"><a href="#过滤协议" class="headerlink" title="过滤协议"></a>过滤协议</h3><p>只想查看 udp 协议</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any -nn udp</span><br></pre></td></tr></table></figure>

<h3 id="用-ASCII-格式查看包体内容：-A-选项"><a href="#用-ASCII-格式查看包体内容：-A-选项" class="headerlink" title="用 ASCII 格式查看包体内容：-A 选项"></a>用 ASCII 格式查看包体内容：-A 选项</h3><p>使用 -A 可以用 ASCII 打印报文内容，比如常用的 HTTP 协议传输 json 、html 文件等都可以用这个选项</p>
<h3 id="与-A-对应的还有一个-X-命令，用来同时用-HEX-和-ASCII-显示报文内容。"><a href="#与-A-对应的还有一个-X-命令，用来同时用-HEX-和-ASCII-显示报文内容。" class="headerlink" title="与 -A 对应的还有一个 -X 命令，用来同时用 HEX 和 ASCII 显示报文内容。"></a>与 -A 对应的还有一个 -X 命令，用来同时用 HEX 和 ASCII 显示报文内容。</h3><h3 id="限制包大小：-s-选项"><a href="#限制包大小：-s-选项" class="headerlink" title="限制包大小：-s 选项"></a>限制包大小：-s 选项</h3><p>当包体很大，可以用 -s 选项截取部分报文内容，一般都跟 -A 一起使用。查看每个包体前 500 字节可以用下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any -nn port 80 -A -s 500</span><br></pre></td></tr></table></figure>
<p>如果想显示包体所有内容，可以加上-s 0</p>
<h3 id="只抓取-5-个报文：-c-选项"><a href="#只抓取-5-个报文：-c-选项" class="headerlink" title="只抓取 5 个报文： -c 选项"></a>只抓取 5 个报文： -c 选项</h3><p>使用 -c number命令可以抓取 number 个报文后退出。在网络包交互非常频繁的服务器上抓包比较有用，可能运维人员只想抓取 1000 个包来分析一些网络问题，就比较有用了。<br>sudo tcpdump -i any -nn port 80  -c 5</p>
<h3 id="数据报文输出到文件：-w-选项"><a href="#数据报文输出到文件：-w-选项" class="headerlink" title="数据报文输出到文件：-w 选项"></a>数据报文输出到文件：-w 选项</h3><p>-w 选项用来把数据报文输出到文件，比如下面的命令就是把所有 80 端口的数据输出到文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any port 80 -w test.pcap</span><br></pre></td></tr></table></figure>
<p>生成的 pcap 文件就可以用 wireshark 打开进行更详细的分析了</p>
<p>也可以加上-U强制立即写到本地磁盘，性能稍差</p>
<h3 id="显示绝对的序号：-S-选项"><a href="#显示绝对的序号：-S-选项" class="headerlink" title="显示绝对的序号：-S 选项"></a>显示绝对的序号：-S 选项</h3><p>默认情况下，tcpdump 显示的是从 0 开始的相对序号。如果想查看真正的绝对序号，可以用 -S 选项。</p>
<p>没有 -S 时的输出，seq 和 ACK 都是从 0 开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any port 80 -nn</span><br></pre></td></tr></table></figure>
<p>没有 -S 时的输出，可以看到 seq 不是从 0 开始</p>
<h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><p>tcpdump 真正强大的是可以用布尔运算符and（或&amp;&amp;）、or（或||）、not（或!）来组合出任意复杂的过滤器</p>
<p>抓取 ip 为 10.211.55.10 到端口 3306 的数据包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any host 10.211.55.10 and dst port 3306</span><br></pre></td></tr></table></figure>

<p>抓取源 ip 为 10.211.55.10，目标端口除了22 以外所有的流量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any src 10.211.55.10 and not dst port 22</span><br></pre></td></tr></table></figure>

<h3 id="复杂的分组"><a href="#复杂的分组" class="headerlink" title="复杂的分组"></a>复杂的分组</h3><p>如果要抓取：来源 ip 为 10.211.55.10 且目标端口为 3306 或 6379 的包，按照前面的描述，我们会写出下面的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any src 10.211.55.10 and (dst port 3306 or 6379)</span><br></pre></td></tr></table></figure>
<p>如果运行一下，就会发现执行报错了，因为包含了特殊字符()，解决的办法是用单引号把复杂的组合条件包起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i any &#39;src 10.211.55.10 and (dst port 3306 or 6379)&#39;</span><br></pre></td></tr></table></figure>

<p>显示所有的 RST 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump &#39;tcp[13] &amp; 4 !&#x3D; 0&#39;</span><br></pre></td></tr></table></figure>
<p>要弄懂这个语句，必须要清楚 TCP 首部中 offset 为 13 的字节的第 3 比特位就是 RST</p>
<p>下图是 TCP 头的结构<br><img src="https://raw.githubusercontent.com/zhanghaisong911/picBed/master/img/20200918001914.png" alt><br>tcp[13] 表示 tcp 头部中偏移量为 13 字节，如上图中红色框的部分，</p>
<p>!=0 表示当前 bit 置 1，即存在此标记位，跟 4 做与运算是因为 RST 在 TCP 的标记位的位置在第 3 位(00000100)</p>
<p>如果想过滤 SYN + ACK 包，那就是 SYN 和 ACK 包同时置位（00010010），写成 tcpdump 语句就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump &#39;tcp[13] &amp; 18 !&#x3D; 0&#39;</span><br></pre></td></tr></table></figure>

<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>我们在机器 A（10.211.55.10）用nc -l 8080启动一个 tcp 的服务器，然后启动 tcpdump 抓包（sudo tcpdump -i any port 8080 -nn -A ）。然后在机器 B（10.211.55.5） 用 nc 10.211.55.10 8080进行连接，然后输入”hello, world”回车，过一段时间在机器 B 用 ctrl-c 结束连接，整个过程抓到的包如下（中间删掉了一些无关的信息）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 16:46:22.722865 IP 10.211.55.5.45424 &gt; 10.211.55.10.8080: Flags [S], seq 3782956689, win 29200, options [mss 1460,sackOK,TS val 463670960 ecr 0,nop,wscale 7], length 0</span><br><span class="line"></span><br><span class="line">2 16:46:22.722903 IP 10.211.55.10.8080 &gt; 10.211.55.5.45424: Flags [S.], seq 3722022028, ack 3782956690, win 28960, options [mss 1460,sackOK,TS val 463298257 ecr 463670960,nop,wscale 7], length 0</span><br><span class="line"></span><br><span class="line">3 16:46:22.723068 IP 10.211.55.5.45424 &gt; 10.211.55.10.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 463670960 ecr 463298257], length 0</span><br><span class="line"></span><br><span class="line">4 16:46:25.947217 IP 10.211.55.5.45424 &gt; 10.211.55.10.8080: Flags [P.], seq 1:13, ack 1, win 229, options [nop,nop,TS val 463674184 ecr 463298257], length 12</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">5 16:46:25.947261 IP 10.211.55.10.8080 &gt; 10.211.55.5.45424: Flags [.], ack 13, win 227, options [nop,nop,TS val 463301481 ecr 463674184], length 0</span><br><span class="line"></span><br><span class="line">6 16:46:28.011057 IP 10.211.55.5.45424 &gt; 10.211.55.10.8080: Flags [F.], seq 13, ack 1, win 229, options [nop,nop,TS val 463676248 ecr 463301481], length 0</span><br><span class="line"></span><br><span class="line">7 16:46:28.011153 IP 10.211.55.10.8080 &gt; 10.211.55.5.45424: Flags [F.], seq 1, ack 14, win 227, options [nop,nop,TS val 463303545 ecr 463676248], length 0</span><br><span class="line"></span><br><span class="line">8 16:46:28.011263 IP 10.211.55.5.45424 &gt; 10.211.55.10.8080: Flags [.], ack 2, win 229, options [nop,nop,TS val 463676248 ecr 463303545], length 0</span><br></pre></td></tr></table></figure>
<p>第 1~3 行是 TCP 的三次握手的过程</p>
<p>第 1 行 中，第一部分是这个包的时间（16:46:22.722865），显示到微秒级。接下来的 “10.211.55.5.45424 &gt; 10.211.55.10.8080” 表示 TCP 四元组：包的源地址、源端口、目标地址、目标端口，中间的大于号表示包的流向。接下来的 “Flags [S]” 表示 TCP 首部的 flags 字段，这里的 S 表示设置了 SYN 标志，其它可能的标志有</p>
<ul>
<li>F：FIN 标志</li>
<li>R：RST 标志</li>
<li>P：PSH 标志</li>
<li>U：URG 标志</li>
<li>. ：没有标志，ACK 情况下使用</li>
</ul>
<p>接下来的 “seq 3782956689” 是 SYN 包的序号。需要注意的是默认的显示方式是在 SYN 包里的显示真正的序号，在随后的段中，为了方便阅读，显示的序号都是相对序号。</p>
<p>接下来的 “win 29200” 表示自己声明的接收窗口的大小</p>
<p>接下来用[] 包起来的 options 表示 TCP 的选项值，里面有很多重要的信息，比如 MSS、window scale、SACK 等</p>
<p>最后面的 length 参数表示当前包的长度</p>
<p>第 2 行是一个 SYN+ACK 包，如前面所说，SYN 包中包序号用的是绝对序号，后面的 win = 28960 也声明的发送端的接收窗口大小。</p>
<p>从第 3 行开始，后面的包序号都用的是相对序号了。第三行是客户端 B 向服务端 A 发送的一个 ACK 包。注意这里 win=229，实际的窗口并不是 229，因为窗口缩放（window scale） 在三次握手中确定，后面的窗口大小都需要乘以 window scale 的值 2^7（128），比如这里的窗口大小等于 229 * 2^7 = 229 * 128 = 29312</p>
<p>第 4 行是客户端 B 向服务端 A 发送”hello world”字符串，这里的 flag 为P.,表示 PSH+ACK。发送包的 seq 为 1:13，长度 length 为 12。窗口大小还是 229 * 128</p>
<p>第 5 行是服务端 A 收到”hello world”字符串以后回复的 ACK 包，可以看到 ACK 的值为 13，表示序号为 13 之前的所有的包都已经收到，下次发包从 13 开始发</p>
<p>第 6 行是客户端 B 执行 Ctrl+C 以后nc 客户端准备退出时发送的四次挥手的第一个 FIN 包，包序号还是 13，长度为 0</p>
<p>第 7 行是服务端 A 对 B 发出的 FIN 包后，也同时回复 FIN + ACK，因为没有往客户端传输过数据包，所以这里的 SEQ 还是 1。</p>
<p>第 8 行是客户端 A 对 服务端 B 发出的 FIN 包回复的 ACK 包</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>对方怀疑我方有问题，查看对方这个ip下端口的使用情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -i any -nn host 121.36.52.74 -s 0 -w dump &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -r dump -nn | grep &#39;\[S\]&#39; | awk &#39;&#123;print $3&#125;&#39; | sort | uniq -c | sort -rn|less</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>m3u8笔记</title>
    <url>/2020/09/17/m3u8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="m3u8笔记"><a href="#m3u8笔记" class="headerlink" title="m3u8笔记"></a>m3u8笔记</h1><p><strong>什么是 m3u8</strong></p>
<p>说到 m3u8 就要先说说 HLS（HTTP Live Streaming）。HLS 是 Apple 公司针对 iPhone、iPod、iTouch 等移动设备，而研发的基于 HTTP 协议的流媒体解决方案。在 HLS 技术中，Web 服务器可以向客户端提供接近实时的音视频流，但是它又是使用的标准的 HTTP 协议。所以基本上，比较大型的点播直播类服务，都是基于 HLS 的。</p>
<a id="more"></a>
<p>而该技术的原理，就是将视频文件或者视频流，进行切片（ts文件），并建立索引文件（m3u8），它支持的视频流编码为 H.264，音频流编码为 AAC。</p>
<p>简单来说，基于 HLS 的视频流，会将完整的视频，切割成一个个比较小的视频片段（ts 文件），然后根据协议组合成一个 m3u8 文件。这些比较小的 ts 文件，是可以单独播放的。而视频播放器，拿到 m3u8 文件之后，根据对其内 ts 片段的索引，连续播放不同的视频片段，来达到流畅的播放效果。</p>
<p> <strong>下载的 m3u8 文件</strong></p>
<p>这种 m3u8 文件就还是比较清晰的，能看到它一个个的片段。但是需要注意的是，这里的片段，全部是基于域名的相对地址，也就是说，这样一个 m3u8 文件，你丢到播放器里，是无法播放的，但是如果你记录了原始下载这个 m3u8 的链接，它在播放器里是可以正常播放的。</p>
<p>*<em>ffmpeg下载 m3u8 *</em></p>
<p>ffmpeg 是一套可以用来记录、转换音视频，并将其转化为流的开源程序，采用 LGPL 或 GPL 协议许可证书，很多大型的音视频软件，内部都是基于 ffmpeg 的。不了解不要紧，总之知道它对操作 ffmpeg 非常的方便。</p>
<p>如果本机上没有，就需要安装了。在 Mac 下，使用 homebrew 下载 ffmpeg 非常的方便。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

<p>配置好 ffmpeg 的环境之后，只需要一行命令，就可以自动下载一个远端的 m3u8 文件，并且以一个 mp4 格式保存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &quot;m3u8_file_uri&quot; &quot;save_video.mp4&quot;</span><br></pre></td></tr></table></figure>

<p>到此，如果 m3u8 的链接正确可播放，就会开始下载，等待下载完成就可以了，最终会在指定目录下，保存 save_video.mp4 文件，它就是最终我们下载的离线视频文件。</p>
]]></content>
  </entry>
  <entry>
    <title>我的宝宝</title>
    <url>/2020/09/15/test-img/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhanghaisong911/picBed/master/img/404.jpg" alt><br><img src="/2020/09/15/test-img/shilian.jpg" alt="image"></p>
]]></content>
      <categories>
        <category>败家子</category>
      </categories>
      <tags>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2020/09/08/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>2020/m3u8笔记</title>
    <url>/2020/09/08/2020/m3u8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="m3u8笔记"><a href="#m3u8笔记" class="headerlink" title="m3u8笔记"></a>m3u8笔记</h1><p><strong>什么是 m3u8</strong></p>
<p>说到 m3u8 就要先说说 HLS（HTTP Live Streaming）。HLS 是 Apple 公司针对 iPhone、iPod、iTouch 等移动设备，而研发的基于 HTTP 协议的流媒体解决方案。在 HLS 技术中，Web 服务器可以向客户端提供接近实时的音视频流，但是它又是使用的标准的 HTTP 协议。所以基本上，比较大型的点播直播类服务，都是基于 HLS 的。</p>
<p>而该技术的原理，就是将视频文件或者视频流，进行切片（ts文件），并建立索引文件（m3u8），它支持的视频流编码为 H.264，音频流编码为 AAC。</p>
<p>简单来说，基于 HLS 的视频流，会将完整的视频，切割成一个个比较小的视频片段（ts 文件），然后根据协议组合成一个 m3u8 文件。这些比较小的 ts 文件，是可以单独播放的。而视频播放器，拿到 m3u8 文件之后，根据对其内 ts 片段的索引，连续播放不同的视频片段，来达到流畅的播放效果。</p>
<p> <strong>下载的 m3u8 文件</strong></p>
<p>这种 m3u8 文件就还是比较清晰的，能看到它一个个的片段。但是需要注意的是，这里的片段，全部是基于域名的相对地址，也就是说，这样一个 m3u8 文件，你丢到播放器里，是无法播放的，但是如果你记录了原始下载这个 m3u8 的链接，它在播放器里是可以正常播放的。</p>
<p>*<em>ffmpeg下载 m3u8 *</em></p>
<p>ffmpeg 是一套可以用来记录、转换音视频，并将其转化为流的开源程序，采用 LGPL 或 GPL 协议许可证书，很多大型的音视频软件，内部都是基于 ffmpeg 的。不了解不要紧，总之知道它对操作 ffmpeg 非常的方便。</p>
<p>如果本机上没有，就需要安装了。在 Mac 下，使用 homebrew 下载 ffmpeg 非常的方便。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

<p>配置好 ffmpeg 的环境之后，只需要一行命令，就可以自动下载一个远端的 m3u8 文件，并且以一个 mp4 格式保存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &quot;m3u8_file_uri&quot; &quot;save_video.mp4&quot;</span><br></pre></td></tr></table></figure>

<p>到此，如果 m3u8 的链接正确可播放，就会开始下载，等待下载完成就可以了，最终会在指定目录下，保存 save_video.mp4 文件，它就是最终我们下载的离线视频文件。</p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/09/08/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/09/08/categories/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>article title</title>
    <url>/2020/06/07/article-title/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
