<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css">
<script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"></script>
]]></content>
      <categories>
        <category>java</category>
        <category>servlet</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>article title</title>
    <url>/2020/06/07/article-title/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>m3u8笔记</title>
    <url>/2020/09/17/m3u8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="m3u8笔记"><a href="#m3u8笔记" class="headerlink" title="m3u8笔记"></a>m3u8笔记</h1><p><strong>什么是 m3u8</strong></p>
<p>说到 m3u8 就要先说说 HLS（HTTP Live Streaming）。HLS 是 Apple 公司针对 iPhone、iPod、iTouch 等移动设备，而研发的基于 HTTP 协议的流媒体解决方案。在 HLS 技术中，Web 服务器可以向客户端提供接近实时的音视频流，但是它又是使用的标准的 HTTP 协议。所以基本上，比较大型的点播直播类服务，都是基于 HLS 的。</p>
<a id="more"></a>
<p>而该技术的原理，就是将视频文件或者视频流，进行切片（ts文件），并建立索引文件（m3u8），它支持的视频流编码为 H.264，音频流编码为 AAC。</p>
<p>简单来说，基于 HLS 的视频流，会将完整的视频，切割成一个个比较小的视频片段（ts 文件），然后根据协议组合成一个 m3u8 文件。这些比较小的 ts 文件，是可以单独播放的。而视频播放器，拿到 m3u8 文件之后，根据对其内 ts 片段的索引，连续播放不同的视频片段，来达到流畅的播放效果。</p>
<p> <strong>下载的 m3u8 文件</strong></p>
<p>这种 m3u8 文件就还是比较清晰的，能看到它一个个的片段。但是需要注意的是，这里的片段，全部是基于域名的相对地址，也就是说，这样一个 m3u8 文件，你丢到播放器里，是无法播放的，但是如果你记录了原始下载这个 m3u8 的链接，它在播放器里是可以正常播放的。</p>
<p>*<em>ffmpeg下载 m3u8 *</em></p>
<p>ffmpeg 是一套可以用来记录、转换音视频，并将其转化为流的开源程序，采用 LGPL 或 GPL 协议许可证书，很多大型的音视频软件，内部都是基于 ffmpeg 的。不了解不要紧，总之知道它对操作 ffmpeg 非常的方便。</p>
<p>如果本机上没有，就需要安装了。在 Mac 下，使用 homebrew 下载 ffmpeg 非常的方便。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

<p>配置好 ffmpeg 的环境之后，只需要一行命令，就可以自动下载一个远端的 m3u8 文件，并且以一个 mp4 格式保存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &quot;m3u8_file_uri&quot; &quot;save_video.mp4&quot;</span><br></pre></td></tr></table></figure>

<p>到此，如果 m3u8 的链接正确可播放，就会开始下载，等待下载完成就可以了，最终会在指定目录下，保存 save_video.mp4 文件，它就是最终我们下载的离线视频文件。</p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/09/08/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>我的宝宝</title>
    <url>/2020/09/15/test-img/</url>
    <content><![CDATA[<img src="/2020/09/15/test-img/09/15/test-img/shilian.jpg" class title="描述语句">


]]></content>
      <categories>
        <category>败家子</category>
      </categories>
      <tags>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2020/09/08/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>2020/m3u8笔记</title>
    <url>/2020/09/08/2020/m3u8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="m3u8笔记"><a href="#m3u8笔记" class="headerlink" title="m3u8笔记"></a>m3u8笔记</h1><p><strong>什么是 m3u8</strong></p>
<p>说到 m3u8 就要先说说 HLS（HTTP Live Streaming）。HLS 是 Apple 公司针对 iPhone、iPod、iTouch 等移动设备，而研发的基于 HTTP 协议的流媒体解决方案。在 HLS 技术中，Web 服务器可以向客户端提供接近实时的音视频流，但是它又是使用的标准的 HTTP 协议。所以基本上，比较大型的点播直播类服务，都是基于 HLS 的。</p>
<p>而该技术的原理，就是将视频文件或者视频流，进行切片（ts文件），并建立索引文件（m3u8），它支持的视频流编码为 H.264，音频流编码为 AAC。</p>
<p>简单来说，基于 HLS 的视频流，会将完整的视频，切割成一个个比较小的视频片段（ts 文件），然后根据协议组合成一个 m3u8 文件。这些比较小的 ts 文件，是可以单独播放的。而视频播放器，拿到 m3u8 文件之后，根据对其内 ts 片段的索引，连续播放不同的视频片段，来达到流畅的播放效果。</p>
<p> <strong>下载的 m3u8 文件</strong></p>
<p>这种 m3u8 文件就还是比较清晰的，能看到它一个个的片段。但是需要注意的是，这里的片段，全部是基于域名的相对地址，也就是说，这样一个 m3u8 文件，你丢到播放器里，是无法播放的，但是如果你记录了原始下载这个 m3u8 的链接，它在播放器里是可以正常播放的。</p>
<p>*<em>ffmpeg下载 m3u8 *</em></p>
<p>ffmpeg 是一套可以用来记录、转换音视频，并将其转化为流的开源程序，采用 LGPL 或 GPL 协议许可证书，很多大型的音视频软件，内部都是基于 ffmpeg 的。不了解不要紧，总之知道它对操作 ffmpeg 非常的方便。</p>
<p>如果本机上没有，就需要安装了。在 Mac 下，使用 homebrew 下载 ffmpeg 非常的方便。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

<p>配置好 ffmpeg 的环境之后，只需要一行命令，就可以自动下载一个远端的 m3u8 文件，并且以一个 mp4 格式保存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &quot;m3u8_file_uri&quot; &quot;save_video.mp4&quot;</span><br></pre></td></tr></table></figure>

<p>到此，如果 m3u8 的链接正确可播放，就会开始下载，等待下载完成就可以了，最终会在指定目录下，保存 save_video.mp4 文件，它就是最终我们下载的离线视频文件。</p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/09/08/categories/test/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
